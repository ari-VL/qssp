import numpy as np
from qssp.qshmm import qsHMM
from qssp.utils import GoldenMean, SNS, A_0p

def test_qGM_alph():
    qGM = qsHMM(GoldenMean(),A_0p)
    assert qGM.alph_size == 2
    assert (qGM.alph == A_0p).all()

def test_q_word():
    qGM = qsHMM(GoldenMean(),A_0p)
    np.testing.assert_allclose(qGM.q_word('10').state, \
    [[0.5+0.j, 0. +0.j, 0.5+0.j, 0. +0.j],
       [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j],
       [0.5+0.j, 0. +0.j, 0.5+0.j, 0. +0.j],
       [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j]])
    qSNS = qsHMM(SNS(),A_0p)
    np.testing.assert_allclose(qSNS.q_word('01').state, \
    [[0.5+0.j, 0.5+0.j, 0. +0.j, 0. +0.j],
       [0.5+0.j, 0.5+0.j, 0. +0.j, 0. +0.j],
       [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j],
       [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j]])
    
def test_noise():
    qGM_noisy = qsHMM(GoldenMean(),A_0p, noise_type='depolarizing',noise_level=0.2)
    np.testing.assert_allclose(qGM_noisy.q_word('01').state, \
    [[0.45+0.j, 0.36+0.j, 0.  +0.j, 0.  +0.j],
       [0.36+0.j, 0.45+0.j, 0.  +0.j, 0.  +0.j],
       [0.  +0.j, 0.  +0.j, 0.05+0.j, 0.04+0.j],
       [0.  +0.j, 0.  +0.j, 0.04+0.j, 0.05+0.j]])
    
def test_q_words():
    qGM = qsHMM(GoldenMean(),A_0p)
    for word in qGM.q_words(10,2):
        assert(np.allclose(word.state, \
        [[0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j]]) or \
        np.allclose(word.state, \
        [[0.5+0.j, 0.5+0.j, 0.+0.j, 0.+0.j],
         [0.5+0.j, 0.5+0.j, 0.+0.j, 0.+0.j],
         [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
         [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]) or \
        np.allclose(word.state, \
        [[0.5+0.j, 0.+0.j, 0.5+0.j, 0.+0.j],
         [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
         [0.5+0.j, 0.+0.j, 0.5+0.j, 0.+0.j],
         [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]))
        
def test_q_block():
    qGM = qsHMM(GoldenMean(),A_0p)
    np.testing.assert_allclose(qGM.q_block(3).state, \
       [[0.27083333+0.j, 0.14583333+0.j, 0.1875    +0.j, 0.0625    +0.j,
        0.14583333+0.j, 0.10416667+0.j, 0.0625    +0.j, 0.02083333+0.j],
       [0.14583333+0.j, 0.14583333+0.j, 0.0625    +0.j, 0.0625    +0.j,
        0.10416667+0.j, 0.10416667+0.j, 0.02083333+0.j, 0.02083333+0.j],
       [0.1875    +0.j, 0.0625    +0.j, 0.1875    +0.j, 0.0625    +0.j,
        0.0625    +0.j, 0.02083333+0.j, 0.0625    +0.j, 0.02083333+0.j],
       [0.0625    +0.j, 0.0625    +0.j, 0.0625    +0.j, 0.0625    +0.j,
        0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j],
       [0.14583333+0.j, 0.10416667+0.j, 0.0625    +0.j, 0.02083333+0.j,
        0.14583333+0.j, 0.10416667+0.j, 0.0625    +0.j, 0.02083333+0.j],
       [0.10416667+0.j, 0.10416667+0.j, 0.02083333+0.j, 0.02083333+0.j,
        0.10416667+0.j, 0.10416667+0.j, 0.02083333+0.j, 0.02083333+0.j],
       [0.0625    +0.j, 0.02083333+0.j, 0.0625    +0.j, 0.02083333+0.j,
        0.0625    +0.j, 0.02083333+0.j, 0.0625    +0.j, 0.02083333+0.j],
       [0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j,
        0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j, 0.02083333+0.j]], \
        rtol = 1e-5, atol=1e-7)
    
def test_q_block_not_join():
    qGM = qsHMM(GoldenMean(),A_0p)
    words, probs = qGM.q_block(2,join=False)
    np.testing.assert_allclose(words,
        [np.array([[0.5+0.j, 0. +0.j, 0.5+0.j, 0. +0.j],
         [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j],
         [0.5+0.j, 0. +0.j, 0.5+0.j, 0. +0.j],
         [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j]]),
        np.array([[0.5+0.j, 0.5+0.j, 0. +0.j, 0. +0.j],
         [0.5+0.j, 0.5+0.j, 0. +0.j, 0. +0.j],
         [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j],
         [0. +0.j, 0. +0.j, 0. +0.j, 0. +0.j]]),
        np.array([[0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j],
         [0.25+0.j, 0.25+0.j, 0.25+0.j, 0.25+0.j]])], \
          rtol = 1e-5, atol=1e-7)
    np.testing.assert_allclose(probs, \
        np.array([0.3333333333333333, 0.3333333333333333, 0.3333333333333333]))
    
def test_q_block_entropies():
    qGM = qsHMM(GoldenMean(),A_0p)
    np.testing.assert_allclose(qGM.q_block_entropies(8),
        [0, 0.5500477595827576, 1.007280814654124, 1.4575289480897418, \
         1.9070860342632245, 2.3565707230229274, 2.8060475979831514, 3.2555236199536774, 3.7049995479130557])
    qSNS = qsHMM(SNS(),A_0p)
    np.testing.assert_allclose(qSNS.q_block_entropies(8),
        [0, 0.48376694420142596, 0.9245228687272576, 1.362485064632082, \
         1.8000891201292835, 2.237633869724295, 2.675167174089672, 3.1126980381349894, 3.550228344285003])
  
#def test_q_entropy_rate